<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
	<!-- Throttle, authorize, validate, cache, or transform the requests -->
	<inbound>
		<base />
		<set-header name="Accept-Encoding" exists-action="override">
			<value>deflate</value>
		</set-header>
	</inbound>
	<!-- Control if and how the requests are forwarded to services  -->
	<backend>
		<base />
	</backend>
	<!-- Customize the responses -->
	<outbound>
		<base />
		<choose>
			<when condition="@(context.Response.StatusCode == 200 && context.Product?.Name != "Unlimited")">
				<set-body>@{
                        var response = context.Response.Body.As<JObject>();

                        foreach (var key in new [] {"hair_color", "skin_color", "eye_color", "gender"}) {
                            response.Property(key).Remove();
                        }

                        return response.ToString();
                    }
                </set-body>
			</when>
		</choose>
	</outbound>
	<!-- Handle exceptions and customize error responses  -->
	<on-error>
		<base />
	</on-error>
</policies>